<persistence xmlns="http://java.sun.com/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
        http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
    version="2.0">

    <persistence-unit name="cones">
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        
        <!-- Não é obrigatório para o hibernate mas é orientado pela especificação,
        	Para garantir uma possivel mudança de provider é legal configurar as classes
         -->
        <class>br.com.coneboard.modelo.Cone</class>

        <properties>
            <!-- Configurações da JPA para acesso ao banco -->
            <property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
            <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost/coneboard" />
            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="" />
			
			<!-- Configurações do próprio hibernates - mudar a implementação gera mudança aqui -->

			<!-- 
			Apesar do SQL ser um padrão, alguns fabricantes podem ter algumas variações de sintaxe.
			 O dialeto permite que o provider consiga enviar as queries corretamente ao banco
			 -->
            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
            <property name="hibernate.show_sql" value="true" />
            <property name="hibernate.format_sql" value="true" />

			<!-- 
				Teremos acesso à criação de querys de Data Definition Language (DDL), 
				  ou seja, as de CREATE TABLE, ALTER TABLE e DROP TABLE 
				  que criam tabelas baseadas nos modelos de nossos projetos, 
				  varrendo os atributos e classes para mapear.
			 -->
            <property name="hibernate.hbm2ddl.auto" value="update" />

        </properties>
    </persistence-unit>
</persistence>